

.. _sphx_glr_gallery_geometric_manipulations.py:


Geometric Manipulations
=======================

*geopandas* makes available all the tools for geometric manipulations in the
`*shapely* library <http://toblerity.org/shapely/manual.html>`_.

Note that documentation for all set-theoretic tools for creating new shapes
using the relationship between two different spatial datasets -- like creating
intersections, or differences -- can be found on the
:doc:`set operations <set_operations>` page.

Constructive Methods
~~~~~~~~~~~~~~~~~~~~

.. method:: GeoSeries.buffer(distance, resolution=16)

  Returns a ``GeoSeries`` of geometries representing all points within a
  given ``distance`` of each geometric object.

.. attribute:: GeoSeries.boundary

  Returns a ``GeoSeries`` of lower dimensional objects representing
  each geometries's set-theoretic `boundary`.

.. attribute:: GeoSeries.centroid

  Returns a ``GeoSeries`` of points for each geometric centroid.

.. attribute:: GeoSeries.convex_hull

  Returns a ``GeoSeries`` of geometries representing the smallest
  convex `Polygon` containing all the points in each object unless the
  number of points in the object is less than three. For two points,
  the convex hull collapses to a `LineString`; for 1, a `Point`.

.. attribute:: GeoSeries.envelope

  Returns a ``GeoSeries`` of geometries representing the point or
  smallest rectangular polygon (with sides parallel to the coordinate
  axes) that contains each object.

.. method:: GeoSeries.simplify(tolerance, preserve_topology=True)

  Returns a ``GeoSeries`` containing a simplified representation of
  each object.

.. attribute:: GeoSeries.unary_union

  Return a geometry containing the union of all geometries in the ``GeoSeries``.


Affine transformations
~~~~~~~~~~~~~~~~~~~~~~~~

.. method:: GeoSeries.rotate(self, angle, origin='center', use_radians=False)

  Rotate the coordinates of the GeoSeries.

.. method:: GeoSeries.scale(self, xfact=1.0, yfact=1.0, zfact=1.0, origin='center')

 Scale the geometries of the GeoSeries along each (x, y, z) dimensio.

.. method:: GeoSeries.skew(self, angle, origin='center', use_radians=False)

  Shear/Skew the geometries of the GeoSeries by angles along x and y dimensions.

.. method:: GeoSeries.translate(self, angle, origin='center', use_radians=False)

  Shift the coordinates of the GeoSeries.


Examples of Geometric Manipulations
------------------------------------



.. code-block:: python

    # sphinx_gallery_thumbnail_number = 5
    import numpy as np
    from shapely.geometry import Polygon
    from geopandas import GeoSeries, GeoDataFrame

    p1 = Polygon([(0, 0), (1, 0), (1, 1)])
    p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])
    p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])
    g = GeoSeries([p1, p2, p3])
    print(g)

    g.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    0         POLYGON ((0 0, 1 0, 1 1, 0 0))
    1    POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))
    2    POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))
    dtype: object


Some geographic operations return normal pandas object.  The ``area``
property of a ``GeoSeries`` will return a ``pandas.Series`` containing
the area of each item in the ``GeoSeries``:



.. code-block:: python


    print(g.area)





.. rst-class:: sphx-glr-script-out

 Out::

    0    0.5
    1    1.0
    2    1.0
    dtype: float64


Other operations return GeoPandas objects:



.. code-block:: python



    print(g.buffer(0.5))
    g.buffer(0.5).plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_002.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    0    POLYGON ((-0.3535533905932737 0.35355339059327...
    1    POLYGON ((-0.5 0, -0.5 1, -0.4975923633360985 ...
    2    POLYGON ((1.5 0, 1.5 1, 1.502407636663901 1.04...
    dtype: object


GeoPandas objects also know how to plot themselves.  GeoPandas uses
`descartes`_ to generate a `matplotlib`_ plot. To generate a plot
of our GeoSeries, use:



.. code-block:: python


    g.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_003.png
    :align: center




GeoPandas also implements alternate constructors that can read any data
format recognized by `fiona`_.  To read a `file containing the boroughs
of New York City`_:



.. code-block:: python


    boros = GeoDataFrame.from_file('data/nybb_16a/nybb.shp')
    boros.set_index('BoroCode', inplace=True)
    boros = boros.sort_index()
    print(boros)
    boros.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_004.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    BoroName     Shape_Leng    Shape_Area  \
    BoroCode                                               
    1             Manhattan  359299.096471  6.364715e+08   
    2                 Bronx  464392.991824  1.186925e+09   
    3              Brooklyn  741080.523166  1.937479e+09   
    4                Queens  896344.047763  3.045213e+09   
    5         Staten Island  330470.010332  1.623820e+09   

                                                       geometry  
    BoroCode                                                     
    1         (POLYGON ((981219.0557861328 188655.3157958984...  
    2         (POLYGON ((1012821.805786133 229228.2645874023...  
    3         (POLYGON ((1021176.479003906 151374.7969970703...  
    4         (POLYGON ((1029606.076599121 156073.8142089844...  
    5         (POLYGON ((970217.0223999023 145643.3322143555...



.. code-block:: python

    print(boros['geometry'].convex_hull)
    boros['geometry'].convex_hull.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_005.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    BoroCode
    1    POLYGON ((977855.4451904297 188082.3223876953,...
    2    POLYGON ((1017949.977600098 225426.8845825195,...
    3    POLYGON ((988872.8212280273 146772.0317993164,...
    4    POLYGON ((1000721.531799316 136681.776184082, ...
    5    POLYGON ((915517.6877458114 120121.8812543372,...
    dtype: object


To demonstrate a more complex operation, we'll generate a
``GeoSeries`` containing 2000 random points:



.. code-block:: python


    from shapely.geometry import Point
    xmin, xmax, ymin, ymax = 900000, 1080000, 120000, 280000
    xc = (xmax - xmin) * np.random.random(2000) + xmin
    yc = (ymax - ymin) * np.random.random(2000) + ymin
    pts = GeoSeries([Point(x, y) for x, y in zip(xc, yc)])







Now draw a circle with fixed radius around each point:



.. code-block:: python


    circles = pts.buffer(2000)







We can collapse these circles into a single shapely MultiPolygon
geometry with:



.. code-block:: python


    mp = circles.unary_union







To extract the part of this geometry contained in each borough, we can
just use:



.. code-block:: python


    holes = boros['geometry'].intersection(mp)
    holes.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_006.png
    :align: center




and to get the area outside of the holes:



.. code-block:: python


    boros_with_holes = boros['geometry'].difference(mp)
    boros_with_holes.plot()




.. image:: /gallery/images/sphx_glr_geometric_manipulations_007.png
    :align: center




Note that this can be simplified a bit, since ``geometry`` is
available as an attribute on a ``GeoDataFrame``, and the
``intersection`` and ``difference`` methods are implemented with the
"&" and "-" operators, respectively.  For example, the latter could
have been expressed simply as ``boros.geometry - mp``.

It's easy to do things like calculate the fractional area in each
borough that are in the holes:



.. code-block:: python


    print(holes.area / boros.geometry.area)





.. rst-class:: sphx-glr-script-out

 Out::

    BoroCode
    1    0.577316
    2    0.590955
    3    0.613467
    4    0.606928
    5    0.592292
    dtype: float64


.. _Descartes: https://pypi.python.org/pypi/descartes
.. _matplotlib: http://matplotlib.org
.. _fiona: http://toblerity.github.io/fiona
.. _geopy: https://github.com/geopy/geopy
.. _geo_interface: https://gist.github.com/sgillies/2217756
.. _file containing the boroughs of New York City: http://www1.nyc.gov/assets/planning/download/zip/data-maps/open-data/nybb_16a.zip


**Total running time of the script:** ( 0 minutes  16.788 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: geometric_manipulations.py <geometric_manipulations.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: geometric_manipulations.ipynb <geometric_manipulations.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
