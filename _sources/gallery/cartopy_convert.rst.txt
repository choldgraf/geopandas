

.. _sphx_glr_gallery_cartopy_convert.py:


Plotting with CartoPy and GeoPandas
-----------------------------------

Converting between GeoPandas and CartoPy for visualizing data.

`CartoPy <http://scitools.org.uk/cartopy/>`_ is a Python library
that specializes in creating geospatial
visualizations. It has a slightly different way of representing
Coordinate Reference Systems (CRS) as well as constructing plots.
This example steps through a round-trip transfer of data
between GeoPandas and CartoPy.

First we'll load in the data using GeoPandas.



.. code-block:: python

    # sphinx_gallery_thumbnail_number = 7
    import geopandas as gpd
    import matplotlib.pyplot as plt
    from cartopy import crs as ccrs

    path = gpd.datasets.get_path('naturalearth_lowres')
    df = gpd.read_file(path)
    # Add a column we'll use later
    df['gdp_pp'] = df['gdp_md_est'] / df['pop_est']







First we'll visualize the map using GeoPandas



.. code-block:: python

    df.plot()




.. image:: /gallery/images/sphx_glr_cartopy_convert_001.png
    :align: center




Plotting with CartoPy
---------------------

Cartopy also handles Shapely objects well, but it uses a different system for
CRS. To plot this data with CartoPy, we'll first need to project it into a
new CRS. We'll use a CRS defined within CartoPy and use the GeoPandas
``to_crs`` method to make the transformation.



.. code-block:: python


    # Define the CartoPy CRS object.
    crs = ccrs.AzimuthalEquidistant()

    # This can be converted into a `proj4` string/dict compatible with GeoPandas
    crs_proj4 = crs.proj4_init
    df_ae = df.to_crs(crs_proj4)

    # Here's what the plot looks like in GeoPandas
    df_ae.plot()




.. image:: /gallery/images/sphx_glr_cartopy_convert_002.png
    :align: center




Now that our data is in a CRS based off of CartoPy, we can easily
plot it.



.. code-block:: python


    fig, ax = plt.subplots(subplot_kw={'projection': crs})
    ax.add_geometries(df_ae['geometry'], crs=crs)




.. image:: /gallery/images/sphx_glr_cartopy_convert_003.png
    :align: center




Note that we could have easily done this with an EPSG code like so:



.. code-block:: python

    crs_epsg = ccrs.epsg('3857')
    df_epsg = df.to_crs(epsg='3857')

    # Generate a figure with two axes, one for CartoPy, one for GeoPandas
    fig, axs = plt.subplots(1, 2, subplot_kw={'projection': crs_epsg},
                            figsize=(10, 5))
    # Make the CartoPy plot
    axs[0].add_geometries(df_epsg['geometry'], crs=crs_epsg,
                          facecolor='white', edgecolor='black')
    # Make the GeoPandas plot
    df_epsg.plot(ax=axs[1], color='white')




.. image:: /gallery/images/sphx_glr_cartopy_convert_004.png
    :align: center




CartoPy to GeoPandas
--------------------

Next we'll perform a CRS projection in CartoPy, and then convert it
back into a GeoPandas object.



.. code-block:: python


    crs_new = ccrs.AlbersEqualArea()
    new_geometries = [crs_new.project_geometry(ii, src_crs=crs)
                      for ii in df_ae['geometry'].values]

    fig, ax = plt.subplots(subplot_kw={'projection': crs_new})
    ax.add_geometries(new_geometries, crs=crs_new)




.. image:: /gallery/images/sphx_glr_cartopy_convert_005.png
    :align: center




Now that we've created new Shapely objects with the CartoPy CRS,
we can use this to create a GeoDataFrame.



.. code-block:: python


    df_aea = gpd.GeoDataFrame(df['gdp_pp'], geometry=new_geometries,
                              crs=crs_new.proj4_init)
    df_aea.plot()




.. image:: /gallery/images/sphx_glr_cartopy_convert_006.png
    :align: center




We can even combine these into the same figure. Here we'll plot half
of the countries with CartoPy, and the other half with GeoPandas. For
the GeoPandas countries, we'll color each based based on a feature
we've calculated above.



.. code-block:: python


    # Generate a CartoPy figure and add half the countries to it
    fig, ax = plt.subplots(subplot_kw={'projection': crs_new})
    ax.add_geometries(new_geometries[:len(new_geometries) // 2], crs=crs_new)
    # Make the GeoPandas plot
    df_aea.iloc[len(new_geometries) // 2:].plot(column='gdp_pp', ax=ax,
                                                vmin=0, vmax=.02)

    plt.show()



.. image:: /gallery/images/sphx_glr_cartopy_convert_007.png
    :align: center




**Total running time of the script:** ( 0 minutes  7.397 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: cartopy_convert.py <cartopy_convert.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: cartopy_convert.ipynb <cartopy_convert.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
